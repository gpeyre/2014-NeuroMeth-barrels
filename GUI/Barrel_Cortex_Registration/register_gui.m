function [ ] = register_gui( images, prevGui )
    if nargin < 2
      prevGui = -1;
    end
    
    nameWindow = '';
    if isstruct(prevGui)
        nameWindow = get(prevGui.f,'name');
    end

    P = size(images,2);

    registering = false;
    keepOnGoing = true; % boolean to cancel execution of registration (useful
                        % when registering all the sections)
    
    % Labels for pair selection in the listbox
    listLabels = {};
    for i=1:(P-1)
    	listLabels{i} = [num2str(i) '/' num2str(i+1)];
    end
    % Load icons
    iconSelectROI = imresize(imread('icons/layer_select.png'),[16 16]);
    iconFlip = imresize(imread('icons/flip_icon.png'),[16 16]);
    iconReinit = imresize(imread('icons/reinit_icon.png'),[16 16]);
    iconSelectDir = imresize(imread('icons/folder_icon.png'),[16 16]);

    
    %% Global variables
    S.exportDir = nameWindow;

    [Mr,Nr] = size(images(1).im); % real sizes
    displayWidth = 600; % The image are not displayed at their full scale
    scale = displayWidth/Nr;  
    if ~isfield(images,'imReg')
        for i=1:P
            images(i).imReg = images(i).im;
            images(i).maskReg = images(i).mask;
            images(i).dispImReg = imresize(images(i).imReg,scale);
        end
    end
    
    idxSel = 1; % The index of the pair selected in the listbox

    [M,N] = size(images(1).im);
    hS1 = -1; hS2 = -1;
    hSunder = -1;
    hSover = -1; % future handle to the superior image of hAxesOverlay (to update the transparency)
    
    % Variables for ROI selection
    hRect1 = -1; hline1 = -1; % handle to the impoly tool on first section
    hRect2 = -1; hline2 = -1; % handle to im impoly tool on second section
    BW1 = ones(M,N); % Mask on first section
    BW2 = ones(M,N); % Mask on second section

S.f = figure(...
'Units','normalized',...
'outerposition',[0 0 1 1],...
'PaperUnits',get(0,'defaultfigurePaperUnits'),...%'Color',[0.929411764705882 0.929411764705882 0.929411764705882],...
'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
'IntegerHandle','off',...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'MenuBar','none',...
'Name',nameWindow,...
'NumberTitle','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'PaperSize',get(0,'defaultfigurePaperSize'),...
'PaperType',get(0,'defaultfigurePaperType'),...
'UserData',[],...
'Tag','figure1',...
'Visible','off',...
'resize','on');

hPanel = uipanel('Position',[0.25 0.125 0.733 0.857], 'Parent',S.f,'tag','hPanel','visible','off'); 

hAxesOverlay = axes(...
'Parent',hPanel,...
'Position',[0.27 0.01 0.46 0.47],...
'Tag','axes4');

hSlider = uicontrol('Parent',hPanel, 'Style','slider', ...
        'Value',0.5, 'Min',0, 'Max',0.99, 'SliderStep',[1 10]./100, ...
        'Units','normalized', 'Position',[0.71 0.02 0.02 0.44], ...
        'Callback',@slider_call,'visible','off');
    
hTxtSlider = uicontrol('Parent',hPanel, 'Style','text', 'String','0.5', ...
    'Units','normalized', 'Position',[0.735 0.225 0.035 0.03]);


hAxesS2 = axes(...
'Parent',hPanel,...
'Position',[0.52 0.49 0.46 0.47],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[0.336 0.17072 0.245538461538462 0.1164],...
'XColor',get(0,'defaultaxesXColor'),...
'YColor',get(0,'defaultaxesYColor'),...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','axes5');

hAxesS1 = axes(...
'Parent',hPanel,...
'Position',[0.02 0.49 0.46 0.47],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[0.336 0.17072 0.245538461538462 0.1164],...
'XColor',get(0,'defaultaxesXColor'),...
'YColor',get(0,'defaultaxesYColor'),...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','axes6');

hbgReg = uibuttongroup(...
'Parent',S.f,...
'Title','Pairwise registration',...
'UserData',[],...
'Clipping','off',...
'Position',[0.025 0.125 0.216 0.857],...%[0.0251308900523561 0.09 0.263874345549738 0.856893542757417],...
'Tag','uipanel4',...
'SelectedObject',[],...
'SelectionChangeFcn',[],...
'OldSelectedObject',[],...
'visible','off');

S.f8 = uibuttongroup(...
'Parent',hbgReg,...
'Title','Vessel detection',...
'UserData',[],...
'Clipping','off',...
'Position',[0.0967741935483871 0.422594142259414 0.854838709677419 0.301757322175732],...
'Tag','uipanel7',...
'SelectedObject',[],...
'SelectionChangeFcn',[],...
'OldSelectedObject',[]);

S.f9 = uicontrol(...
'Parent',S.f8,...
'Units','normalized',...
'CData',[],...
'Position',[0 0.87 1 0.1],...
'String','Sizes of vessels',...
'Style','text',...
'UserData',[],...
'Tag','text9');

heSizesVessels = uicontrol(...
'Parent',S.f8,...
'Units','normalized',...
'CData',[],...
'Position',[0.0432692307692308 0.69 0.913461538461539 0.2],...
'Style','edit',...
'String','2.5;3;3.5;4;4.5',...
'UserData',[],...
'Tag','edit18');

uicontrol(...
'Parent',S.f8,...
'Units','normalized',...
'CData',[],...
'Position',[0 0.55 1 0.1],...
'String','Threshold (between 0 and 1)',...
'Style','text',...
'UserData',[],...
'Tag','text10');

heThreshVessels = uicontrol(...
'Parent',S.f8,...
'Units','normalized',...
'CData',[],...
'Position',[0.0384615384615385 0.37 0.918269230769231 0.2],...
'Style','edit',...
'String','0.75',...
'UserData',[],...
'Tag','edit19');

h21 = uicontrol(...
'Parent',S.f8,...
'Units','normalized',...
'CData',[],...
'Position',[0 0.23 1 0.1],...
'String','Maximum number of vessels',...
'Style','text',...
'UserData',[],...
'Tag','text10');

heNumVessels = uicontrol(...
'Parent',S.f8,...
'Units','normalized',...
'CData',[],...
'Position',[0.0384615384615385 0.05 0.918269230769231 0.2],...
'Style','edit',...
'String','30',...
'UserData',[],...
'Tag','edit19');


h23 = uibuttongroup(...
'Parent',hbgReg,...
'Title','Initialization',...
'UserData',[],...
'Clipping','off',...
'Position',[0.0967741935483871 0.207112970711297 0.858870967741935 0.196652719665272],...
'Tag','uipanel8',...
'SelectedObject',[],...
'SelectionChangeFcn',[],...
'OldSelectedObject',[]);

h24 = uicontrol(...
'Parent',h23,...
'Units','normalized',...
'CData',[],...
'Position',[0.0 0.691358024691358 1 0.234567901234568],...
'String','Angles',...
'Style','text',...
'UserData',[],...
'Tag','text11');

heInitAngles = uicontrol(...
'Parent',h23,...
'Units','normalized',...
'CData',[],...
'Position',[0.0430622009569378 0.493827160493827 0.904306220095694 0.296296296296296],...
'Style','edit',...
'String','-20:5:20',...
'UserData',[],...
'Tag','edit20');

hcbAlignCentroids = uicontrol(...
'Parent',h23,...
'Units','normalized',...
'CData',[],...
'Position',[0.0478468899521531 0.111111111111111 0.8 0.283950617283951],...
'String','Align images centroids',...
'Style','checkbox',...
'UserData',[],...
'Tag','checkbox6',...
'Value',true);

hlbSelectPair = uicontrol(...
'Parent',hbgReg,...
'Units','normalized',...
'Callback',@update_pair_call,...
'CData',[],...
'Position',[0.064516129032258 0.780334728033472 0.633064516129032 0.196652719665272],...
'String',listLabels,...
'Style','listbox',...
'Value',1,...
'UserData',[],...
'Tag','listbox3');

hcbRegisterAll =  uicontrol(...
'Parent',hbgReg,...
'Units','normalized',...
'CData',[],...
'Position',[0.0524193548387096 0.70410041841004 1.22983870967742 0.0962343096234309],...
'String','Register all pairs starting from the selected one',...
'Style','checkbox',...
'UserData',[],...
'Tag','checkbox6',...
'Value',false);

register_btn = uicontrol(...
'Parent',hbgReg,...
'Units','normalized',...
'Callback',@register_call,...
'CData',[],...
'Position',[0.104838709677419 0.1094560669455 0.782258064516129 0.0711297071129707],...
'String','Register !',...
'UserData',[],...
'Tag','pushbutton3');

cancel_btn = uicontrol(...
'Parent',hbgReg,...
'Units','normalized',...
'Callback',@cancel_call,...
'CData',[],...
'Position',[0.104838709677419 0.0306694560669455 0.782258064516129 0.0711297071129707],...
'String','Cancel',...
'UserData',[]);

    roi1_btn = uicontrol('parent',hPanel,...
                 'style','push',...
                 'units','normalized',...
                 'position',[0.02 0.49 0.03 0.05],...
                 'HorizontalAlign','left',...
                 'callback',{@roi1_call},...
                 'TooltipString','Select ROI',...
                 'cdata',iconSelectROI);
   
    roi2_btn = uicontrol('parent',hPanel,...
                 'style','push',...
                 'units','normalized',...
                 'position',[0.52 0.49 0.03 0.05],...
                 'HorizontalAlign','left',...
                 'callback',{@roi2_call},...
                 'TooltipString','Select ROI',...
                 'cdata',iconSelectROI);
    
    flip2_btn = uicontrol('parent',hPanel,...
                 'style','push',...
                 'units','normalized',...
                 'position',[0.52 0.55 0.03 0.05],...
                 'HorizontalAlign','left',...
                 'callback',{@flip2_call},...
                 'TooltipString','Flip section',...
                 'cdata',iconFlip);
             
    reinit2_btn = uicontrol('parent',hPanel,...
                 'style','push',...
                 'units','normalized',...
                 'position',[0.52 0.61 0.03 0.05],...
                 'HorizontalAlign','left',...
                 'callback',{@reinit2_call},...
                 'TooltipString','Reinitialize section',...
                 'cdata',iconReinit);
 
    export_dir_btn = uicontrol('style','push',...
                 'units','normalized',...
                 'position',[0.75 0.08 0.03 0.03],...
                 'HorizontalAlign','left',...%'string','Select directory',...
                 'callback',{@select_dir_call},...
                 'TooltipString','Select export directory',...
                 'cdata',iconSelectDir);

    htExportDir = uicontrol(...
        'Parent',S.f,...
        'Units','normalized',...
        'CData',[],...
        'Position',[0.79 0.08 0.15 0.03],...
        'String',S.exportDir,...
        'Style','edit',...
        'UserData',[],...
        'Tag','text10',...
        'ButtonDownFcn',@select_dir_call);

    prev_btn = uicontrol('style','push',...
                 'units','normalized',...
                 'position',[0.05 0.02 0.2 0.05],...
                 'HorizontalAlign','left',...
                 'string','Previous (segmentation)',...
                 'callback',{@prev_btn_call,S,prevGui});
             
    next_btn = uicontrol('style','push',...
                 'units','normalized',...
                 'position',[0.75 0.02 0.2 0.05],...
                 'HorizontalAlign','left',...
                 'string','Next (merge)',...
                 'callback',{@next_btn_call});

    % Create the toolbar
    th = uitoolbar(S.f);
    set(S.f,'Toolbar','figure');
           
    % Display the two first sections
    update_axes(1,2);
    
    set(S.f,'Visible','on')
    set(hPanel,'Visible','on')
    set(hbgReg,'Visible','on')
    set(hSlider,'Visible','on')

    %% Callback functions
    function[] = update_pair_call(varargin)
        idxSel = get(varargin{1},'Value');
        update_axes(idxSel,idxSel+1);
    end

    function slider_call(varargin)
        %# get new alpha value
        alpha = get(varargin{1},'Value');
        %# update patches transparency and label
        set(hTxtSlider, 'String',num2str(alpha,'%.02f'))
        %set(hPatch, 'FaceAlpha',alpha)
        set(hSover, 'AlphaData', alpha);
        drawnow
    end

    function[] = register_call(varargin)
        watchon;drawnow;
        registering = true;
        sigma = str2num(get(heSizesVessels,'String')); % detect vessels of different sizes
        thresh = str2double(get(heThreshVessels,'String')); % threshold on correlation values
        nvess = str2double(get(heNumVessels,'String'));
        thetas = str2num(get(heInitAngles,'String')); % angles in gradians
        alignCentroids = get(hcbAlignCentroids,'Value');
        debug = false;
        if ~get(hcbRegisterAll,'Value')
            % Register the selected pair
            [images(idxSel+1).imReg,c2,images(idxSel+1).maskReg,c1,~,~] = icp_register_vessels(...
                images(idxSel).imReg,...
                images(idxSel+1).imReg,...
                sigma,nvess,thresh,thetas,alignCentroids,BW1,BW2,...
                images(idxSel).maskReg,...
                images(idxSel+1).maskReg,debug);
            images(idxSel+1).dispImReg = imresize(images(idxSel+1).imReg,scale);
            update_axes(idxSel,idxSel+1,c1,c2);
            % Reinitialize the masks
            BW1 = ones(M,N);
            BW2 = ones(M,N);
        else
            % Register all pairs from the selected one (% does not use any
            % mask !)
            for j=idxSel:P-1
                if keepOnGoing
                    set(hlbSelectPair,'Value',j); drawnow
                    [images(j+1).imReg,c2,images(j+1).maskReg,c1] = icp_register_vessels(...
                        images(j).imReg,...
                        images(j+1).imReg,...
                        sigma,nvess,thresh,thetas,alignCentroids,BW1,BW2,...
                        images(j).maskReg,...
                        images(j+1).maskReg,debug);
                     images(j+1).dispImReg = imresize(images(j+1).imReg,scale);
                    update_axes(j,j+1,c1,c2);
                end
            end
        end
        registering = false;
        keepOnGoing = true;
        watchoff;drawnow;
    end

    function [] = cancel_call(varargin)
        if registering
            keepOnGoing = false
        end
    end

    function [] = prev_btn_call(varargin)
        delete(varargin{3}.f); % Going back to previous GUI deletes the current GUI
        set(varargin{4}.f,'visible','on');
    end

    function [] = next_btn_call(varargin)
        % Export registered images and masks
        for j=1:P
            imwrite(images(j).imReg,char(strcat(S.exportDir,'/',images(j).name,'_reg.png')));
            imwrite(images(j).maskReg,char(strcat(S.exportDir,'/',images(j).name,'_maskreg.png')));
        end
        set(S.f,'visible','off');
        assignin('base','images',images);
        merge_barrels_gui(images,S,[],[]); % Call next page GUI
    end

    function [] = roi1_call(varargin)
        set(roi1_btn,'enable','off');
        set(register_btn,'enable','off');
        if ishandle(hline1)
            delete(hline1);
        end
        BW1 = ones(M,N);
        try
            hRect1 = imrect(hAxesS1);
            posPoly1 = wait(hRect1);
            % Draw rectangle and save mask before deleting the handle to imrect
            axes(hAxesS1); hold on
            hline1 = rectangle('Position',posPoly1,'EdgeColor','g');%plot([posPoly1(:,1);posPoly1(1,1)],[posPoly1(:,2);posPoly1(1,2)],'g','LineWidth',1)
            hold off,drawnow
            BW1small = createMask(hRect1);
            BW1 = imresize(BW1small,1/scale);
            delete(hRect1);assignin('base','BW1',BW1);
        catch err
            disp('error in roi1_call ! ');
            delete(hRect1);
        end
        set(roi1_btn,'enable','on');
        if strcmp(get(roi2_btn,'enable'),'on')
            set(register_btn,'enable','on');
        end
        set(roi1_btn,'enable','on');
    end

    function [] = roi2_call(varargin)
        set(roi2_btn,'enable','off');
        set(register_btn,'enable','off');
        if ishandle(hline2)
            delete(hline2);
        end
        BW2 = ones(M,N);
        try
            hRect2 = imrect(hAxesS2);
            posPoly2 = wait(hRect2);
            % Draw rectangle and save mask before deleting the handle to imrect
            axes(hAxesS2); hold on
            hline2 = rectangle('Position',posPoly2,'EdgeColor','g');%plot([posPoly2(:,2);posPoly1(1,1)],[posPoly1(:,2);posPoly1(1,2)],'g','LineWidth',1)
            hold off,drawnow
            BW2small = createMask(hRect2);
            BW2 = imresize(BW2small,1/scale);
            delete(hRect2);assignin('base','BW2',BW2);
        catch err
            disp('error in roi2_call ! ');
            delete(hRect2);
        end
        set(roi2_btn,'enable','on');
        if strcmp(get(roi1_btn,'enable'),'on')
            set(register_btn,'enable','on');
        end
        set(roi2_btn,'enable','on');
    end

    function[] = reinit2_call(varargin)
        images(idxSel+1).imReg = images(idxSel+1).im;
        images(idxSel+1).dispImReg = imresize(images(idxSel+1).imReg,scale);
        images(idxSel+1).maskReg = images(idxSel+1).mask;
        update_axes(idxSel,idxSel+1);
    end

    function[] = flip2_call(varargin)
        % Flip section
        tmp = images(idxSel+1).imReg; tmp = tmp(:,end:-1:1);
        images(idxSel+1).imReg = tmp;
        images(idxSel+1).dispImReg = imresize(images(idxSel+1).imReg,scale);
        images(idxSel+1).maskReg = images(idxSel+1).mask;
        % Flip segmentation mask
        tmp = images(idxSel+1).maskReg; tmp = tmp(:,end:-1:1);
        images(idxSel+1).maskReg = tmp;
        update_axes(idxSel,idxSel+1);
    end

    function[] = select_dir_call(varargin)
        tmp = uigetdir();
        if tmp ~= 0
            S.exportDir = tmp;
            set(htExportDir, 'String', S.exportDir);
        end
    end

    %% Utility functions
    function[] = update_axes(idx1,idx2,c1,c2)
        cla(hAxesS1);cla(hAxesS2);cla(hAxesOverlay);
        % Reinitialize the masks
        BW1 = ones(M,N);
        BW2 = ones(M,N);
        set(findobj('tag','hPanel'),'Visible','off');
        if nargin <4
            c1 = [];
            c2 = [];
        end 
        % Load the 2 sections in the axes
        % First axe
        axes(hAxesS1)
        hS1 = imagesc(images(idx1).dispImReg,'tag','section1'); axis image;colormap gray
        title(['Section ' num2str(idx1)]);
        c1small = c1*scale;
        if ~isempty(c1small)
            hold on;
            plot(c1small(:,1), c1small(:,2), 'g.');
        end
        set(hAxesS1,'xtick',[]);set(hAxesS1,'ytick',[]);
        % Second axe
        axes(hAxesS2);
        hS2 = imagesc(images(idx2).dispImReg,'tag','section2'); axis image;colormap gray
        title(['Section ' num2str(idx2)]);
        c2small = c2*scale;
        if ~isempty(c2small)
            hold on;
            plot(c2small(:,1), c2small(:,2), 'r+');
        end
        set(hAxesS2,'xtick',[]);set(hAxesS2,'ytick',[]);
        % Third axe: overlay of the two sections
        axes(hAxesOverlay);
        hSunder = imagesc(images(idx1).dispImReg); axis image; colormap gray; hold on;
        hSover = imagesc(images(idx2).dispImReg);axis image; colormap gray;
        set(hSover, 'AlphaData',get(hSlider,'Value'));
        set(hAxesOverlay,'xtick',[]);set(hAxesOverlay,'ytick',[]);
        if ~isempty(c1small) && ~isempty(c2small)
            hold on;
            plot(c1small(:,1), c1small(:,2), 'g.');
            hold on;
            plot(c2small(:,1), c2small(:,2), 'r+');
        end
        hold off;
        drawnow
        set(findobj('tag','hPanel'),'Visible','on');
    end
end